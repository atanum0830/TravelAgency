[{"C:\\projects\\travel\\travel\\src\\index.js":"1","C:\\projects\\travel\\travel\\src\\App.js":"2","C:\\projects\\travel\\travel\\src\\reportWebVitals.js":"3","C:\\projects\\travel\\travel\\src\\components\\home.js":"4","C:\\projects\\travel\\travel\\src\\components\\bookings.js":"5","C:\\projects\\travel\\travel\\src\\components\\customers.js":"6","C:\\projects\\travel\\travel\\src\\components\\tours.js":"7","C:\\projects\\travel\\travel\\src\\components\\no-match.js":"8","C:\\projects\\travel\\travel\\src\\components\\navigation.js":"9","C:\\projects\\travel\\travel\\src\\services\\firebase.js":"10","C:\\projects\\travel\\travel\\src\\components\\pagination.js":"11","C:\\projects\\travel\\travel\\src\\services\\data-service.js":"12","C:\\projects\\travel\\travel\\src\\components\\handler.js":"13","C:\\projects\\travel\\travel\\src\\model\\all-classes.js":"14"},{"size":500,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":3062,"mtime":1609260737735,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":112,"mtime":1608755798565,"results":"19","hashOfConfig":"16"},{"size":118,"mtime":1608755881195,"results":"20","hashOfConfig":"16"},{"size":123,"mtime":1608756821159,"results":"21","hashOfConfig":"16"},{"size":9644,"mtime":1609260737736,"results":"22","hashOfConfig":"16"},{"size":183,"mtime":1608756649468,"results":"23","hashOfConfig":"16"},{"size":2875,"mtime":1608840140229,"results":"24","hashOfConfig":"16"},{"size":510,"mtime":1608878316440,"results":"25","hashOfConfig":"16"},{"size":1035,"mtime":1609217582331,"results":"26","hashOfConfig":"16"},{"size":1601,"mtime":1609191081393,"results":"27","hashOfConfig":"16"},{"size":1100,"mtime":1609256355731,"results":"28","hashOfConfig":"16"},{"size":1145,"mtime":1609203829981,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"ptx2ce",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\projects\\travel\\travel\\src\\index.js",[],["62","63"],"C:\\projects\\travel\\travel\\src\\App.js",["64","65"],"C:\\projects\\travel\\travel\\src\\reportWebVitals.js",[],"C:\\projects\\travel\\travel\\src\\components\\home.js",[],"C:\\projects\\travel\\travel\\src\\components\\bookings.js",[],"C:\\projects\\travel\\travel\\src\\components\\customers.js",[],"C:\\projects\\travel\\travel\\src\\components\\tours.js",["66","67","68"],"import React, { useState } from 'react';\r\nimport { Table, Card, Button, FormControl, InputGroup } from 'react-bootstrap';\r\nimport { format } from 'date-fns';\r\nimport Pagination from './pagination';\r\nimport { Handler } from './handler';\r\nimport { TourRec } from '../model/all-classes';\r\n\r\nexport function TourComponent(props) {\r\n    console.log(props);\r\n\r\n    const [isNewRecord, setIsNewRecord] = useState(false); //true for add mode, false for update/edit mode\r\n    const [pageRecords, setPageRecords] = useState([]); // array of records in a specific page (3 such records)\r\n    const [detailRecord, setDetailRecord] = useState({});\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [collChanged, setCollChanged] = useState(false);\r\n    const recordsPerPage = 3;\r\n    const isEmpty = (o) => !o || Object.keys(o).length === 0;\r\n\r\n    /**\r\n     * Generic Event handler for any Text field change\r\n     */\r\n    const handleTextChange = (event) => {\r\n        const handler = new Handler(event, detailRecord, isNewRecord);\r\n        const detail = handler.handleTextChange();\r\n        setDetailRecord(detail);\r\n    };\r\n\r\n    /**\r\n     * Generic Event handler for any Boolean field change\r\n     */\r\n    const handleBooleanChange = (event) => {\r\n        const handler = new Handler(event, detailRecord, isNewRecord);\r\n        const detail = handler.handleBooleanChange();\r\n        setDetailRecord(detail);\r\n    };\r\n\r\n    /**\r\n     * Edit Tenant Event handler\r\n     */\r\n    const handleEditRecord = (record) => {\r\n        console.log(\"handleEditRecord >>>>>\", record);\r\n        setDetailRecord(record);\r\n        setIsNewRecord(false);\r\n    };\r\n\r\n    /**\r\n     * Add a New Tenant Event handler\r\n     */\r\n    const handleAddNewRecord = () => {\r\n        setIsNewRecord(true);\r\n        const detail = new TourRec({});\r\n        setDetailRecord(detail);\r\n    };\r\n\r\n    /**\r\n     * Delete Tenant Event handler\r\n     */\r\n    const handleDeleteRecord = (record, index) => {\r\n        // if (record === detailRecord) { setDetailRecord(props.records[0]); }\r\n        props.remove(record);\r\n        setCollChanged(true);\r\n    };\r\n\r\n    /**\r\n     * SAVE/SUBMIT button Event handler\r\n     */\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (isNewRecord) {\r\n            props.add(detailRecord);\r\n            setCollChanged(true);\r\n        } else {\r\n            props.update(detailRecord);\r\n            setCollChanged(true);\r\n        }\r\n    };\r\n\r\n    // Definition of the function called getPageRecords\r\n    // This will be executed inside paginate function\r\n    const getPageRecords = (allRecords, startIndex, recordsPerPage) => {\r\n        const records = [];\r\n        for (let index = startIndex; index < startIndex + recordsPerPage && index < allRecords.length; index++) {\r\n            const record = allRecords[index];\r\n            records.push(record);\r\n        }\r\n\r\n        return records;\r\n    };\r\n\r\n    // Definition of the function called paginate. Circular bracket optional if only one param\r\n    // This is not executed here. This will be executed in the pagination component\r\n    const paginate = (pageNumber) => {\r\n        setCurrentPage(pageNumber);\r\n        const startIndex = (pageNumber - 1) * recordsPerPage;\r\n        const records = getPageRecords(props.records, startIndex, recordsPerPage);\r\n        setPageRecords(records);\r\n        setDetailRecord(records[0]);\r\n    };\r\n\r\n    if (isEmpty(detailRecord) && props.loaded) {\r\n        console.log(\"Initialized Tenants Component\");\r\n        setDetailRecord(props.records[0]);\r\n    }\r\n    \r\n    if (props.records && props.records.length > 0 && pageRecords.length === 0) {\r\n        paginate(1);\r\n    }\r\n\r\n    if (collChanged && props.loaded) {\r\n        paginate(currentPage);\r\n        setCollChanged(false);\r\n    }\r\n    /*\r\n    ** Use map function to build a dynamic JSX list of Card objects\r\n    ** by transforming props.records array\r\n    */\r\n    const rows = pageRecords.map((record, index) => {\r\n        const row = (\r\n        <tr key={index}>\r\n            <td>{format(record.startDate.toDate(), 'dd-MMM-yyyy')}</td>\r\n            <td style={{maxWidth: \"150px\"}}>{record.name}</td>\r\n            <td>\r\n                <i className=\"mx-2 fas fa-binoculars\" style={{color: \"MediumBlue\"}} aria-hidden=\"true\" \r\n                    onClick={() => {\r\n                        handleEditRecord(record);\r\n                    }}\r\n                ></i>\r\n                <i className=\"mx-2 far fa-edit\" style={{color: \"Indigo\"}} aria-hidden=\"true\"\r\n                    onClick={() => {\r\n                        handleEditRecord(record);\r\n                    }}\r\n                ></i>\r\n                <i className=\"mx-2 fa fa-trash\" style={{color: \"Red\"}} aria-hidden=\"true\"\r\n                    onClick={() => {\r\n                        handleDeleteRecord(record, index);\r\n                    }}\r\n                ></i>\r\n            </td>\r\n        </tr>\r\n        );\r\n        return row;\r\n    });\r\n\r\n    const leftSide = (\r\n        <Card>\r\n            <Card.Body>\r\n            <Card.Title>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">Upcoming Tours</div>\r\n                </div>\r\n            </Card.Title>\r\n            <Table striped bordered hover size=\"sm\">\r\n                <thead variant=\"primary\">\r\n                    <tr>\r\n                        <th>Tour Date</th>\r\n                        <th>Tour Name</th>\r\n                        <th>\r\n                            <button type=\"submit\" className=\"btn btn-primary btn-sm\" onClick={handleAddNewRecord}>\r\n                                <i className=\"fa fa-plus-circle\" aria-hidden=\"true\"></i> New Tour</button>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{rows}</tbody>\r\n            </Table>\r\n\r\n            <Pagination itemsPerPage={recordsPerPage} totalItems={props.records.length}\r\n                curPageNo={currentPage} paginate={paginate}></Pagination>\r\n\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n\r\n    /*\r\n    rightSide will be the dynamically selected Card object\r\n    when you click <Learn More> it will allocate that object to rightSide\r\n    */\r\n\r\n    const rightSide = (\r\n        <form>\r\n            <div className=\"form-row\">\r\n                <div className=\"form-group col-md-4\">\r\n                    <label for=\"inputName\">Name</label>\r\n                    <input name=\"name\" type=\"text\" className=\"form-control\" id=\"inputName\"\r\n                        value={detailRecord.name ? detailRecord.name : \"\"} onChange={handleTextChange}></input>\r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                    <label for=\"inputStartDate\">Start Date</label>\r\n                    <input name=\"startDate\" type=\"text\" className=\"form-control\" id=\"inputStartDate\"\r\n                        value={detailRecord.startDate ? format(detailRecord.startDate.toDate(), 'dd-MMM-yyyy') : \"\"} onChange={handleTextChange}></input>\r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                    <label for=\"inputEndDate\">End Date</label>\r\n                    <input name=\"endDate\" type=\"text\" className=\"form-control\" id=\"inputEndDate\"\r\n                        value={detailRecord.endDate ? format(detailRecord.endDate.toDate(), 'dd-MMM-yyyy') : \"\"} onChange={handleTextChange}></input>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"form-row col-md-12\">\r\n                <div className=\"form-check col-md-2 mx-2\">\r\n                    <input name=\"mealIncluded\" type=\"checkbox\" className=\"form-check-input px-0\" id=\"inputMealPlan\"\r\n                        checked={detailRecord.mealIncluded ? detailRecord.mealIncluded : false} onChange={handleBooleanChange}></input>\r\n                    <label className=\"form-check-label\" for=\"inputMealPlan\">Meal Included</label>\r\n                </div>\r\n\r\n                <div className=\"form-check col-md-3\">\r\n                    <input name=\"hotelIncluded\" type=\"checkbox\" className=\"form-check-input px-0\" id=\"inputHotel\"\r\n                        checked={detailRecord.hotelIncluded ? detailRecord.hotelIncluded : false} onChange={handleBooleanChange}></input>\r\n                    <label className=\"form-check-label\" for=\"inputHotel\">Hotel Included</label>\r\n                </div>\r\n\r\n                <div className=\"form-check col-md-3\">\r\n                    <input name=\"isPrivate\" type=\"checkbox\" className=\"form-check-input px-0\" id=\"inputGroup\"\r\n                        checked={detailRecord.isPrivate ? detailRecord.isPrivate : false} onChange={handleBooleanChange}></input>\r\n                    <label className=\"form-check-label\" for=\"inputGroup\">Private Tour</label>\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-3\">\r\n                    <input name=\"conducted\" type=\"checkbox\" className=\"form-check-input px-0\" id=\"inputConducted\"\r\n                        checked={detailRecord.conducted ? detailRecord.conducted : false} onChange={handleBooleanChange}></input>\r\n                    <label className=\"form-check-label\" for=\"inputConducted\">Conducted Tour</label>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <button className=\"btn btn-primary\" onClick={handleSubmit}>Save</button>\r\n        </form>\r\n      );\r\n    \r\n    return (\r\n        <div className='container-fluid'>\r\n            <div className='row no-gutters'>\r\n                <div className='col-4 no-gutters'>{leftSide}</div>\r\n                <div className='col-8 no-gutters'>{rightSide}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\projects\\travel\\travel\\src\\components\\no-match.js",[],"C:\\projects\\travel\\travel\\src\\components\\navigation.js",[],"C:\\projects\\travel\\travel\\src\\services\\firebase.js",[],"C:\\projects\\travel\\travel\\src\\components\\pagination.js",["69","70"],"import React from 'react';\r\n\r\nconst Pagination = ({ itemsPerPage, totalItems, curPageNo, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalItems/ itemsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav aria-label=\"Page navigation example\">\r\n      <ul className=\"pagination\">\r\n          <li className=\"page-item\"><a className=\"page-link\" href=\"prev\">Previous</a></li>\r\n          {pageNumbers.map(pageNo => (curPageNo === pageNo) ?\r\n              <li key={pageNo} className=\"page-item active\" aria-current=\"page\">\r\n                  <a onClick={() => paginate(pageNo)} href='#' className='page-link'>{pageNo}</a>\r\n              </li> :\r\n              <li key={pageNo} className=\"page-item\">\r\n                  <a onClick={() => paginate(pageNo)} href='#' className='page-link'>{pageNo}</a>\r\n              </li>\r\n          )}\r\n          <li className=\"page-item\"><a className=\"page-link\" href=\"next\">Next</a></li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n\r\n","C:\\projects\\travel\\travel\\src\\services\\data-service.js",[],"C:\\projects\\travel\\travel\\src\\components\\handler.js",["71"],"import firebase from '../services/firebase';\r\nexport class Handler {\r\n    #record;\r\n    #event;\r\n    #isNew;\r\n    constructor(event, record, isNew) {\r\n        this.#event = event;\r\n        this.#record = {...record};\r\n        this.#isNew = isNew;\r\n    }\r\n\r\n    handleTextChange() {\r\n        const { name, value } = this.#event.target;\r\n        this.#record[name] = value;\r\n        console.log(\"handletextChange >>>>>\", this.#event, name, value, this.#record);\r\n        if (!this.#isNew) {\r\n          const vo = this.#record.vo;\r\n          vo[name] = value;\r\n        }\r\n\r\n        return this.#record;\r\n    }\r\n\r\n    static isEmpty(rec) {\r\n        const isEmpty =  (!rec || Object.keys(rec).length === 0);\r\n        return isEmpty;\r\n    }\r\n}","C:\\projects\\travel\\travel\\src\\model\\all-classes.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":59,"column":9,"nodeType":"78","messageId":"79","endLine":59,"endColumn":22},{"ruleId":"80","severity":1,"message":"81","line":70,"column":6,"nodeType":"82","endLine":70,"endColumn":8,"suggestions":"83"},{"ruleId":"76","severity":1,"message":"84","line":2,"column":23,"nodeType":"78","messageId":"79","endLine":2,"endColumn":29},{"ruleId":"76","severity":1,"message":"85","line":2,"column":31,"nodeType":"78","messageId":"79","endLine":2,"endColumn":42},{"ruleId":"76","severity":1,"message":"86","line":2,"column":44,"nodeType":"78","messageId":"79","endLine":2,"endColumn":54},{"ruleId":"87","severity":1,"message":"88","line":16,"column":19,"nodeType":"89","endLine":16,"endColumn":86},{"ruleId":"87","severity":1,"message":"88","line":19,"column":19,"nodeType":"89","endLine":19,"endColumn":86},{"ruleId":"76","severity":1,"message":"90","line":1,"column":8,"nodeType":"78","messageId":"79","endLine":1,"endColumn":16},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'loadCustomers' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadBookings' and 'loadTours'. Either include them or remove the dependency array.","ArrayExpression",["93"],"'Button' is defined but never used.","'FormControl' is defined but never used.","'InputGroup' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'firebase' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [loadBookings, loadTours]",{"range":"96","text":"97"},[2323,2325],"[loadBookings, loadTours]"]